@startuml Big Picture Architecture

title AgentCrafter - Big Picture Architecture

package "agentcrafter.common" as common {
  class QLearner {
    +choose(state): Action
    +update(trajectory): Unit
    +getQTable(): QTable
  }
  
  class GridWorld {
    +step(state, action): StepResult
    +isValidMove(): Boolean
  }
  
  interface Learner
  
  class State
  class Action
  class LearningConfig
}

package "agentcrafter.marl" as marl {
  package "dsl" {
    interface SimulationDSL {
      +simulation(block): Unit
      +grid(size): Unit
      +agent(): Unit
    }
  }
  
  package "builders" {
    class SimulationBuilder {
      +grid(rows, cols): SimulationBuilder
      +addAgent(spec): SimulationBuilder
      +build(): Unit
    }
    
    class AgentBuilder
    class TriggerBuilder
    class WallLineBuilder
  }
  
  package "managers" {
    class AgentManager {
      +chooseJointActions(): Map[String, Action]
      +updateQLearning(): Unit
    }
    
    class EnvironmentManager {
      +executeActions(): Map[String, State]
      +processTriggers(): Unit
    }
    
    class EpisodeManager {
      +runEpisode(): EpisodeResult
      +resetEpisode(): Unit
    }
    
    class VisualizationManager {
      +updateVisualization(): Unit
    }
  }
  
  class Runner {
    +run(): Unit
  }
  
  class DomainModel {
    AgentSpec
    WorldSpec
    Trigger
    Effect
  }
}

package "agentcrafter.llmqlearning" as llm {
  package "dsl" {
    interface LLMQLearning {
      +useLLM(block): Unit
      +wallsFromLLM(block): Unit
    }
  }
  
  interface LLMService {
    +generateFromLLM(): Option[T]
    +loadIntoBuilder(): Unit
  }
  
  class LLMQTableService {
    +loadQTableFromLLM(): Option[String]
  }
  
  class LLMWallService {
    +generateWallsUsingLLM(): Option[String]
  }
  
  class LLMHttpClient {
    +callLLM(): Try[String]
  }
  
  class QTableLoader {
    +loadMultiAgentQTablesFromJson(): Map[String, Try[Unit]]
  }
}

package "agentcrafter.visualizers" as viz {
  interface Visualizer
  class ConsoleVisualizer
  class QTableVisualizer
}

' Relationships
SimulationDSL ||-- SimulationBuilder : uses
SimulationBuilder --> AgentBuilder : creates
SimulationBuilder --> TriggerBuilder : creates
SimulationBuilder --> WallLineBuilder : creates

Runner --> EpisodeManager : orchestrates
EpisodeManager --> AgentManager : manages
EpisodeManager --> EnvironmentManager : manages
Runner --> VisualizationManager : uses

AgentManager --> QLearner : contains
EnvironmentManager --> GridWorld : uses

LLMQLearning --|> SimulationDSL : extends
LLMQTableService --|> LLMService : implements
LLMWallService --|> LLMService : implements
LLMService --> LLMHttpClient : uses
LLMQTableService --> QTableLoader : uses

QLearner --|> Learner : implements
QLearner --> GridWorld : interacts

VisualizationManager --> Visualizer : uses

note right of llm : "LLM integration extends\nbase MARL functionality"

note bottom of common : "Core Q-learning and\nenvironment abstractions"

@enduml