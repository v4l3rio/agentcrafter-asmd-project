@startuml AgentCrafter System Architecture
!theme plain
title AgentCrafter - High-Level System Architecture

package "DSL Layer" {
  interface SimulationDSL {
    +simulation()
    +grid()
    +agent()
    +walls()
    +asciiWalls()
    +wallsFromLLM()
  }
  
  class LLMQLearning {
    +useLLM()
    -llmConfig: LLMConfig
  }
  
  class Properties {
    +SimulationProperty
    +AgentProperty
    +LearnerProperty
    +WallProperty
  }
}

package "Builder Pattern" {
  class SimulationBuilder {
    -rows, cols: Int
    -walls: Set[State]
    -agents: Map[String, AgentSpec]
    -triggers: Buffer[Trigger]
    +build(): Unit
  }
  
  class AgentBuilder {
    +withLearner()
    +onGoal()
    +build(): AgentSpec
  }
  
  class TriggerBuilder {
    +openWall()
    +endEpisode()
    +give()
  }
  
  class WallLineBuilder {
    +direction()
    +from()
    +to()
  }
}

package "Domain Model" {
  class AgentSpec {
    +id: String
    +start: State
    +goal: State
    +learner: Learner
    +triggers: List[Trigger]
  }
  
  class WorldSpec {
    +rows, cols: Int
    +walls: Set[State]
    +agents: Map[String, AgentSpec]
    +triggers: List[Trigger]
  }
  
  abstract class Effect
  class OpenWall extends Effect
  class EndEpisode extends Effect
  class Reward extends Effect
  
  class Trigger {
    +who: String
    +at: State
    +effects: List[Effect]
  }
}

package "Learning Core" {
  interface Environment {
    +rows, cols: Int
    +step(state, action): StepResult
  }
  
  class GridWorld implements Environment {
    +walls: Set[State]
    +stepPenalty: Double
  }
  
  abstract class Learner {
    +learn(episodes): Unit
    +greedyEpisode(): EpisodeOutcome
  }
  
  class QLearner extends Learner {
    +qTable: Map[(State, Action), Double]
    +learningParameters: LearningParameters
  }
}

package "LLM Integration" {
  class LLMApiClient {
    +generateQTable(): String
    +generateWalls(): String
  }
  
  class LLMQTableService {
    +loadQTableFromLLM(): Option[String]
    +loadQTableIntoAgents(): Unit
  }
  
  class LLMWallService {
    +generateWallsFromPrompt(): Set[State]
  }
  
  class LLMConfig {
    +enabled: Boolean
    +model: String
  }
}

package "Visualization" {
  class Visualizer {
    +updateSingleAgent()
    +updateMultiAgent()
    +render()
  }
  
  class QTableVisualizer {
    +visualizeQTable()
    +showQValues()
  }
}

package "Execution" {
  class Runner {
    +run(): Unit
  }
  
  class EpisodeManager {
    +runEpisodes(): Unit
    +handleTriggers(): Unit
  }
  
  class Simulation {
    +world: WorldSpec
    +visualizer: Option[Visualizer]
  }
}

' Relationships
SimulationDSL --> SimulationBuilder : creates
LLMQLearning --|> SimulationDSL : extends
SimulationBuilder --> AgentBuilder : uses
SimulationBuilder --> WorldSpec : builds
AgentBuilder --> AgentSpec : builds
AgentSpec --> Learner : contains
QLearner --> Environment : uses
GridWorld --> State : manages
LLMQLearning --> LLMConfig : uses
LLMQTableService --> LLMApiClient : uses
LLMWallService --> LLMApiClient : uses
SimulationBuilder --> Runner : creates
Runner --> Simulation : manages
Simulation --> EpisodeManager : uses
Simulation --> Visualizer : optionally uses
EpisodeManager --> Trigger : processes
Trigger --> Effect : contains

@enduml